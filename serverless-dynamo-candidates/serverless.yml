
service: serverless-dynamo-candidates 

custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    qa:
      ITEMS_DYNAMO_TABLE: sls-candidates-qa  
    dev:
      ITEMS_DYNAMO_TABLE: sls-candidates-dev     

provider:
  name: aws
  runtime: nodejs8.10
  profile: adminuser
  region:  us-east-2
  stage: dev
  environment: ${self:custom.settings.${self:custom.stage}}

  iamRoleStatements: # permissions for all of your functions can be set here
      - Effect: "Allow"
        Action: # Gives permission to DynamoDB tables in a specific region       
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.stage}.ITEMS_DYNAMO_TABLE}"  

functions:
  saveItem:
    handler: handler.saveItem
    events:
     - http:
        path: candidates
        method: post
  getItem:
    handler: handler.getItem
    events:
     - http:
        path: candidates/{Id}
        method: get
  getSkill:
    handler: handler.getSkill
    events:
     - http:
        path: skill
        method: post
  deleteItem:
      handler: handler.deleteItem
      events:
      - http:
          path: candidates/{Id}
          method: delete
  updateItem:
      handler: handler.updateItem
      events:
      - http:
          path: candidates/{Id}
          method: put
          
# you can add CloudFormation resource templates here
resources:
 Resources:
   ImagesTable:
     Type: AWS::DynamoDB::Table
     Properties:
      AttributeDefinitions:
      - AttributeName: "Id"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "Id"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: ${self:custom.settings.${self:custom.stage}.ITEMS_DYNAMO_TABLE}